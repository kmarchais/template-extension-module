name: Publish to PyPI
on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:
  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4

      - name: Build source distribution
        run: uv build --sdist

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: dist/*.tar.gz

  build-standard:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, macos-13]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build package
        run: uv build --wheel
      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.whl

  build-manylinux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["cp39", "cp310", "cp311", "cp312", "cp313"]
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python and build wheel
        run: |
          uv build --wheel --python ${{ matrix.python-version }}

          auditwheel repair dist/*.whl --plat manylinux_2_28_x86_64 --only-plat
          rm dist/*.whl
          mv wheelhouse/* dist/

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-manylinux-${{ matrix.python-version }}
          path: dist/*.whl

  upload:
    needs: [build-sdist, build-standard, build-manylinux]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v4

      - name: Get version
        id: get-version
        run: echo "version=$(uv run --with toml python -c 'import toml; print(toml.load("pyproject.toml")["project"]["version"])')" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true

      - name: List distributions
        run: ls -R dist/

      # - name: Publish to PyPI
      #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      #   env:
      #     UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
      #   run: uv publish dist/*.whl --verbose

      - name: Publish to TestPyPI
        if: github.event_name == 'pull_request'
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        run: uv publish dist/* --publish-url https://test.pypi.org/legacy/ --verbose
